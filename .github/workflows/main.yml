name: CI

on: [push, workflow_dispatch]

jobs:
  build:

    runs-on: windows-latest
    timeout-minutes: 360  # Maximum job duration set to 6 hours

    steps:
    - name: Download ngrok
      run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
    - name: Extract ngrok
      run: Expand-Archive ngrok.zip
    - name: Authenticate ngrok
      run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
    - name: Enable Remote Desktop
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
        Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)
    - name: Create Tunnel
      run: .\ngrok\ngrok.exe tcp --log=stdout --log-level=debug 3389
    - name: Keep Alive and Monitor ngrok
      run: |
        while ($true) {
          Write-Output "Checking ngrok tunnel status"
          $ngrokStatus = Get-Process -Name "ngrok" -ErrorAction SilentlyContinue
          if (-not $ngrokStatus) {
            Write-Output "ngrok process not found. Restarting ngrok tunnel..."
            Start-Process -FilePath ".\ngrok\ngrok.exe" -ArgumentList "tcp 3389" -NoNewWindow
          } else {
            Write-Output "ngrok is running"
          }
          Start-Sleep -Seconds 300
        }
